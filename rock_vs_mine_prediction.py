# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nyP3dYqUx8ls4PGCdz7xw-rR0gScxyZ-

importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""Data Collection and processing"""

# loading the dataset to pandas Dataframe

sonar_data= pd.read_csv('/content/sonar data.csv', header = None)

sonar_data.head()

# numbers of rows and columns

sonar_data.shape

sonar_data.describe() # describe statistical measures of the data

sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

#separating data and labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
 print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, stratify = Y, test_size =0.1, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

model = LogisticRegression()

# training the logistic_Regression_model

model.fit(X_train, Y_train)

"""Model Evaluation

"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print(test_data_accuracy)

"""Making a predict System"""



input_data = (0.0068,0.0232,0.0513,0.0444,0.0249,0.0637,0.0422,0.1130,0.1911,0.2475,0.1606,0.0922,0.2398,0.3220,0.4295,0.2652,0.0666,0.1442,0.2373,0.2595,0.2493,0.3903,0.6384,0.8037,0.7026,0.6874,0.6997,0.8558,1.0000,0.9621,0.8996,0.7575,0.6902,0.5686,0.4396,0.4546,0.2959,0.1587,0.1681,0.0842,0.1173,0.1754,0.2728,0.1705,0.0194,0.0213,0.0354,0.0420,0.0093,0.0204,0.0199,0.0173,0.0163,0.0055,0.0045,0.0068,0.0041,0.0052,0.0194,0.0105)
#changing the data into np array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the np array as we are predicting for one instances
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)
print(prediction)
if(prediction[0]=='R'):
  print("The object is a rock")
else:
  print("The object is a mine")

